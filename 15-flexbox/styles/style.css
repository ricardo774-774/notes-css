body {
   font-family: Arial, Helvetica, sans-serif;
   text-align: center;
}

#layout {

   /* **********************  Display  ********************** */

   /* 
       (display: flex) va a manejar un ancho del 100%.
    */

   /* 
       (display: inline-flex) va a adaptar su ancho al contenido que se añada.
    */


   /* **********************  Flex-Direction  ********************** */

   /* 
       (flex-direction: row) va a manejar el contenido como filas de izquierda a derecha.
    */

   /* 
       (flex-direction: row-reverse) va a manejar el contenido como filas de derecha a izquierda
       y va a iniciar del ultimo elemento al primero.
    */

   /* 
       (flex-direction: column) va a manejar el contenido como columnas de arriba a abajo.
    */

   /* 
       (flex-direction: column-reverse) va a manejar el contenido como columnas de abajo a arriba
       y va a iniciar del ultimo elemento al primero.
    */

   /* 
       (flex-direction: unset) no aporta nada extra.
    */


   /* **********************  Flex-Wrap  ********************** */

   /* 
       (flex-wrap: wrap) Adapta el contenido del contenedor, por ejemplo: si queremos añadir mas 
       elementos de los que caben en un ancho del contenedor estos se saldran del contenedor, para evitar esto,
       vamosa usar wrap, que hace que el contenido se coloque uno debajo del otro, en lugar de uno al lado del otro.
    */


   /* **********************  Flex-Flow  ********************** */

   /* 
      (flex-fow: row wrap) Unifica Flex-Wrap y Flex-Direction en una sola linea.
   */

   display: flex;
   flex-direction: row;
   flex-wrap: wrap;

   /* **********************  Justify-Content  ********************** */
   /* 
      (justify-content: flex-start ó left) Alinea el contenido de manera horizontal al 
      lado izquierdo de su contenedor, uno al lado del otro.

      (justify-content: flex-end ó right) Alinea el contenido de manera horizontal al 
      lado derecho de su contenedor, uno al lado del otro.

      (justify-content: center) Alinea el contenido de manera horizontal al 
      centro, uno al lado del otro.

      (justify-content: space-arround) Alinea el contenido de manera horizontal al 
      centro, justificando el espaciado entre cada elemento.

      (justify-content: space-bettwen) Alinea el contenido de manera horizontal al 
      centro, justificando el espaciado entre cada elemento y colocando el elemento inicial 
      y final, en cada ezquina respectivamente.
   */
   justify-content: space-evenly;


   /* **********************  Align-Items: Trabaja con contenedores de elementos  ********************** */

   /* **********************  Align-Self: Trabaja con elementos  ********************** */

   /* 

      (align-items: baseline) Justifica los elementos del contenido de manera vertical a
      al tamaño del contenido, para conseguir un alto justificado.

      (align-items: center) Aplica baseline y acomoda los elementos al centro del contenedor
      de manera vertical.

      (align-items: flex-end) Aplica baseline y acomoda los elementos al final del contenedor
      de manera vertical.

      (align-items: flex-start) Aplica baseline y acomoda los elementos al inicio del contenedor
      de manera vertical.

   */

   height: 500px;
   align-items: flex-end;


   border: 5px solid black;
   padding: 5px;
}

.box {

   /* **********************  Flex-Grow  ********************** */

   /* 
       (flex-grow: 1) Adapta el contenido para que el elemento
       ocupe el espacio ingresado.

       Si quieres modificar el tamaño que ocupe cada uno de sebe acceder al 
       elemento de manera individual y darle: flex-grow: x 
    */

   /* Al ser una clase general dará el mismo espacio a cada elemento */
   /* flex-grow: 1; */

   font-size: 20px;
   font-weight: bold;
   color: white;
   padding: 20px;
   border: 4px solid #222;
   margin: 10px;
   background: gray;
}


/* **********************  Order  ********************** */

/* 
    (order: -1) Cuando le das orden a un unico elemento,
    utiliza -1 ya para ponerlo al inicio de los elementos

    (order: -2) Se pondrá primero que el -1, ya que entre menor sea el numero
    del order se dará prioridad al menor. 

    Si vas a utilizar varios order podrás usar order con los numeros naturales:
    1, 2, 3 etc.
*/


/* **********************  Flex-Shrink  ********************** */

/* 
    flex-shrink Al contrario que Flex-Grow, este va a disminuir el tamaño de un 
    elemento.
*/

.red-box {
   background-color: red;
   /* order: 4; */
   
/* **********************  Flex-Basis ********************** */
/* Funciona como sustituto del width */

/* flex-basis: calc((100% / 3) - 80px); */
}

.green-box {
   background-color: green;
   /* order: 1; */
   /* flex-basis: calc((100% / 3) - 80px); */
}

.orange-box {
   background-color: orange;
   /* order: 3; */
   /* flex-basis: calc((100% / 3) - 80px); */
}

.purple-box {
   background-color: purple;
   /* order: 2; */
   /* flex-basis: calc((100% / 3) - 80px); */
}